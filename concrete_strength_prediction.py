# -*- coding: utf-8 -*-
"""concrete strength prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nmMr3U_XNm_OQ6Iqr3BVMBMY2OCWce06
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor
from sklearn.tree import DecisionTreeRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
upload= files.upload()

data= pd.read_csv('Concrete Compressive Strength.csv')

data.fillna(data.median(), inplace=True)

data.info()

plt.figure(figsize = (25, 20))
plotnumber = 1

for col in data.columns:
    if plotnumber <= 9:
        ax = plt.subplot(3, 3, plotnumber)
        sns.distplot(data[col])
        plt.xlabel(col, fontsize = 15)

    plotnumber += 1

plt.tight_layout()
plt.show()

plt.figure(figsize = (18, 10))

corr = X.corr()
mask = np.triu(np.ones_like(corr, dtype = bool))

sns.heatmap(data = corr, mask = mask, annot = True, fmt = '.2g', linewidths = 1, cbar = False)
plt.show()

X = data.drop(['Concrete compressive strength(MPa, megapascals) ','Age (day)'], axis=1)
y_strength = data['Concrete compressive strength(MPa, megapascals) ']
y_age = data['Age (day)']

X_train, X_test, y_train_strength, y_test_strength, y_train_age, y_test_age = train_test_split(X, y_strength, y_age, test_size=0.2, random_state=42)

def train_model_with_tuning(model, params, X_train, y_train):
    grid_search = GridSearchCV(model, params, cv=5, scoring='neg_mean_squared_error')
    grid_search.fit(X_train, y_train)
    best_model = grid_search.best_estimator_
    return best_model

linear_strength_model = LinearRegression()
random_forest_strength_params = {'n_estimators': [50, 100, 150], 'max_depth': [None, 10, 20]}
random_forest_strength_model = train_model_with_tuning(RandomForestRegressor(random_state=42), random_forest_strength_params, X_train, y_train_strength)
decision_tree_strength_params = {'max_depth': [None, 10, 20]}
decision_tree_strength_model = train_model_with_tuning(DecisionTreeRegressor(random_state=42), decision_tree_strength_params, X_train, y_train_strength)
ada_boost_strength_params = {'n_estimators': [50, 100, 150]}
ada_boost_strength_model = train_model_with_tuning(AdaBoostRegressor(random_state=42), ada_boost_strength_params, X_train, y_train_strength)
xg_boost_strength_params = {'n_estimators': [50, 100, 150]}
xg_boost_strength_model = train_model_with_tuning(XGBRegressor(random_state=42), xg_boost_strength_params, X_train, y_train_strength)

linear_age_model = LinearRegression()
random_forest_age_params = {'n_estimators': [50, 100, 150], 'max_depth': [None, 10, 20]}
random_forest_age_model = train_model_with_tuning(RandomForestRegressor(random_state=42), random_forest_age_params, X_train, y_train_age)
decision_tree_age_params = {'max_depth': [None, 10, 20]}
decision_tree_age_model = train_model_with_tuning(DecisionTreeRegressor(random_state=42), decision_tree_age_params, X_train, y_train_age)
ada_boost_age_params = {'n_estimators': [50, 100, 150]}
ada_boost_age_model = train_model_with_tuning(AdaBoostRegressor(random_state=42), ada_boost_age_params, X_train, y_train_age)
xg_boost_age_params = {'n_estimators': [50, 100, 150]}
xg_boost_age_model = train_model_with_tuning(XGBRegressor(random_state=42), xg_boost_age_params, X_train, y_train_age)

def cross_val_eval(model, X, y):
    mse_scores = -1 * cross_val_score(model, X, y, cv=5, scoring='neg_mean_squared_error')
    rmse_scores = np.sqrt(mse_scores)
    r2_scores = cross_val_score(model, X, y, cv=5, scoring='r2')
    return rmse_scores, r2_scores

models_strength = [
    ("Linear Regression", linear_strength_model),
    ("Random Forest", random_forest_strength_model),
    ("Decision Tree", decision_tree_strength_model),
    ("AdaBoost", ada_boost_strength_model),
    ("XGBoost", xg_boost_strength_model)]

models_age = [
    ("Linear Regression", linear_age_model),
    ("Random Forest", random_forest_age_model),
    ("Decision Tree", decision_tree_age_model),
    ("AdaBoost", ada_boost_age_model),
    ("XGBoost", xg_boost_age_model)]

rmse_strength_list = []
r2_strength_list = []

for model_name, model in models_strength:
    rmse_strength, r2_strength = cross_val_eval(model, X_train, y_train_strength)
    rmse_strength_list.append(rmse_strength)
    r2_strength_list.append(r2_strength)

rmse_age_list = []
r2_age_list = []

for model_name, model in models_age:
    rmse_age, r2_age = cross_val_eval(model, X_train, y_train_age)
    rmse_age_list.append(rmse_age)
    r2_age_list.append(r2_age)

strength_metrics_table = pd.DataFrame({
    "Model": [model_name for model_name, _ in models_strength],
    "RMSE": [np.mean(rmse) for rmse in rmse_strength_list],
    "R2 Score": [np.mean(r2) for r2 in r2_strength_list]
})
age_metrics_table = pd.DataFrame({
    "Model": [model_name for model_name, _ in models_age],
    "RMSE": [np.mean(rmse) for rmse in rmse_age_list],
    "R2 Score": [np.mean(r2) for r2 in r2_age_list]
})

print("Strength Prediction Metrics:")
print(strength_metrics_table)

print("\nAge Prediction Metrics:")
print(age_metrics_table)

